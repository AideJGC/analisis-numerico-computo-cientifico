Traceback (most recent call last):
  File "/home/miuser/.local/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.7/asyncio/base_events.py", line 584, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
G_maximum_flow = nx.DiGraph() 
G_maximum_flow.add_nodes_from(nodes)

edge_capacities = {('O', 'A'): 5,
                   ('O', 'B'): 7,
                   ('O', 'C'): 4,
                   ('A', 'B'): 1,
                   ('A', 'D'): 3,
                   ('B', 'D'): 4,
                   ('B', 'E'): 5,               
                   ('B', 'C'): 2,
                   ('C', 'E'): 4,
                   ('D', 'T'): 9,
                   ('E', 'D'): 1,
                   ('E', 'T'): 6
                  } 
G_maximum_flow.add_edges_from(edge_capacities)

for e in G_maximum_flow.edges():
    G_maximum_flow[e[0]][e[1]]["capacity"] = edge_capacities[e]

plt.figure(figsize=(9, 7))
nx.draw_networkx_edges(G_maximum_flow, pos=nodes_and_pos, 
                       alpha=0.3, 
                       min_target_margin=15)
nx.draw_networkx_edge_labels(G_maximum_flow, pos=nodes_and_pos, 
                             edge_labels=edge_capacities,
                             font_size=15)
nx.draw_networkx_labels(G_maximum_flow, pos=nodes_and_pos)
nx.draw_networkx_nodes(G_maximum_flow, pos=nodes_and_pos, node_size=1000, alpha=0.6)
plt.axis("off")
plt.show()        
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
[0;32m<ipython-input-83-dd13950cee9b>[0m in [0;36m<module>[0;34m[0m
[1;32m     23[0m nx.draw_networkx_edges(G_maximum_flow, pos=nodes_and_pos, 
[1;32m     24[0m                        [0malpha[0m[0;34m=[0m[0;36m0.3[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 25[0;31m                        min_target_margin=15)
[0m[1;32m     26[0m nx.draw_networkx_edge_labels(G_maximum_flow, pos=nodes_and_pos, 
[1;32m     27[0m                              [0medge_labels[0m[0;34m=[0m[0medge_capacities[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.7/site-packages/networkx/drawing/nx_pylab.py[0m in [0;36mdraw_networkx_edges[0;34m(G, pos, edgelist, width, edge_color, style, alpha, arrowstyle, arrowsize, edge_cmap, edge_vmin, edge_vmax, ax, arrows, label, node_size, nodelist, node_shape, connectionstyle, min_source_margin, min_target_margin)[0m
[1;32m    654[0m [0;34m[0m[0m
[1;32m    655[0m     [0;31m# set edge positions[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 656[0;31m     [0medge_pos[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0masarray[0m[0;34m([0m[0;34m[[0m[0;34m([0m[0mpos[0m[0;34m[[0m[0me[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m][0m[0;34m,[0m [0mpos[0m[0;34m[[0m[0me[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m][0m[0;34m)[0m [0;32mfor[0m [0me[0m [0;32min[0m [0medgelist[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    657[0m [0;34m[0m[0m
[1;32m    658[0m     [0;31m# Check if edge_color is an array of floats and map to edge_cmap.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/.local/lib/python3.7/site-packages/networkx/drawing/nx_pylab.py[0m in [0;36m<listcomp>[0;34m(.0)[0m
[1;32m    654[0m [0;34m[0m[0m
[1;32m    655[0m     [0;31m# set edge positions[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 656[0;31m     [0medge_pos[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0masarray[0m[0;34m([0m[0;34m[[0m[0;34m([0m[0mpos[0m[0;34m[[0m[0me[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m][0m[0;34m,[0m [0mpos[0m[0;34m[[0m[0me[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m][0m[0;34m)[0m [0;32mfor[0m [0me[0m [0;32min[0m [0medgelist[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    657[0m [0;34m[0m[0m
[1;32m    658[0m     [0;31m# Check if edge_color is an array of floats and map to edge_cmap.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mKeyError[0m: 'C'
KeyError: 'C'

